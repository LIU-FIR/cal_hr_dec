
#include <cmath>
using namespace std;

typedef struct _IECAS_AstInParams
{
    double LON; /* 地理经度 */
    double LAT; /* 地理纬度 */

    int Year;  /* 年份 */
    int Month; /* 月 */
    int Day;   /* 日 */

    // 北京时
    int Hour;   /* 时 */
    int Minute; /* 分 */
    int Second; /* 秒 */
} IECAS_AstInParams;

typedef struct _IECAS_AstOutParams
{
    double D_angle; /* 赤纬角 */
    double A_angle; /* 赤经角 */
} IECAS_AstOutParams;

double cal_jd(IECAS_AstInParams *ParaIn);
//int sun_hr_dec(double year, double month, double day, double hour, double minute, double second,
//	double lon, double lat, IECAS_AstOutParams *ParaOut);

const double PI = 3.141592653589793238463;
double dT = 68; //67 seconds used in 2017.

double L0_tab[64][3] = { {175347046,0,0},{3341656, 4.6692568, 6283.07585},{34894, 4.6261, 12566.1517},{ 3497, 2.7441, 5753.3849 },
{ 3418,2.8289,3.5231 }, {3136,3.6277,77713.7715}, {2676,4.4181,7860.4194},{2343,6.1352,3930.2097},
{1324,0.7425,11506.7698},{1273,2.0371,529.691},{1199,1.1096,1577.3435},{990,5.233,5884.927},
{902,2.045,26.298},{857,3.508,398.149},{780,1.179,5223.694},{753,2.533,5507.553},
{505,4.583,18849.228},{492,4.205,775.523},{357,2.92,0.067},{317,5.849,11790.629},
{284,1.899,796.298},{271,0.315,10977.079},{243,0.345,5486.778},{206,4.806,2544.314},
{205,1.869,5573.143},{202,2.458,6069.777},{156,0.833,213.299},{132,3.411,2942.463},
{126,1.083,20.775},{115,0.645,0.98},{103,0.636,4694.003},{102,0.976,15720.839},
{102,4.267,7.114},{99,6.21,2146.17},{98,0.68,155.42},{86,5.98,161000.69},
{85,1.3,6275.96},{85,3.67,71430.7},{80,1.81,17260.15},{79,3.04,12036.46},
{75,1.76,5088.63},{74,3.5,3154.69},{74,4.68,801.82},{70,0.83,9437.76},
{62,3.98,8827.39},{61,1.82,7084.9},{57,2.78,6286.6},{56,4.39,14143.5},
{56,3.47,6279.55},{52,0.19,12139.55},{52,1.33,1748.02},{51,0.28,5856.48},
{49,0.49,1194.45},{41,5.37,8429.24},{41,2.4,19651.05},{39,6.17,10447.39},
{37,6.04,10213.29},{37,2.57,1059.38},{36,1.71,2352.87},{36,1.78,6812.77},
{33,0.59,17789.85},{30,0.44,83996.85},{30,2.74,1349.87},{25,3.16,4690.48}
};

double L1_tab[34][3] = { {628331966747,0,0},{206059,2.678235,6283.07585},{4303,2.6351,12566.1517},{425,1.59,3.523},
{119,5.796,26.298},{109,2.966,1577.344 },{93,2.59,18849.23},{72,1.14,529.69},
{68,1.87,398.15},{67,4.41,5507.55},{59,2.89,5223.69},{56,2.17,155.42},
{45,0.4,796.3},{36,0.47,775.52},{29,2.65,7.11},{21,5.34,0.98},
{19,1.85,5486.78},{19,4.97,213.3},{17,2.99,6275.96},{16,0.03,2544.31},
{16,1.43,2146.17},{15,1.21,10977.08},{12,2.83,1748.02},{12,3.26,5088.63},
{12,5.27,1194.45},{12,2.08,4694},{11,0.77,553.57},{10,1.3,6286.6},
{10,4.24,1349.87},{9,2.7,242.73},{9,5.64,951.72},{8,5.3,2352.87},
{6,2.65,9437.76},{6,4.67,4690.48}
};

double L2_tab[20][3] = { {52919,0,0},{8720,1.0721,6283.0758},{309,0.867,12566.152},{27,0.05,3.52},
{16,5.19,26.3},{16,3.68,155.42},{10,0.76,18849.23},{9,2.06,77713.77},
{7,0.83,775.52},{5,4.66,1577.34},{4,1.03,7.11},{4,3.44,5573.14},
{3,5.14,796.3},{3,6.05,5507.55},{3,1.19,242.73},{3,6.12,529.69},
{3,0.31,398.15},{3,2.28,553.57},{2,4.38,5223.69},{2,3.75,0.98} };

double L3_tab[7][3] = { {289,5.844,6283.076},{35,0,0},{17,5.49,12566.15},{3,5.2,155.42},
{1,4.72,3.52},{1,5.3,18849.23},{1,5.97,242.73} };

double L4_tab[3][3] = { {114,3.142,0},{8,4.13,6283.08},{1,3.84,12566.15} };
double L5_tab[3] = { 1,3.14,0 };
double B0_tab[5][3] = { {280,3.199,84334.662},{102,5.422,5507.553},{80,3.88,5223.69},{44,3.7,2352.87},
{32,4,1577.34} };
double B1_tab[2][3] = { {9,3.9,5507.55},{6,1.73,5223.69} };

double R0_tab[40][3] = { {100013989,0,0},{1670700,3.0984635,6283.07585},{13956,3.05525,12566.1517},{3084,5.1985,77713.7715},
{1628,1.1739,5753.3849},{1576,2.8469,7860.4194},{925,5.453,11506.77},{542,4.564,3930.21},
{472,3.661,5884.927},{346,0.964,5507.553},{329,5.9,5223.694},{307,0.299,5573.143},
{243,4.273,11790.629},{212,5.847,1577.344},{186,5.022,10977.079},{175,3.012,18849.228},
{110,5.055,5486.778},{98,0.89,6069.78},{86,5.69,15720.84},{86,1.27,161000.69},
{65,0.27,17260.15},{63,0.92,529.69},{57,2.01,83996.85},{56,5.24,71430.7},
{49,3.25,2544.31},{47,2.58,775.52},{45,5.54,9437.76},{43,6.01,6275.96},
{39,5.36,4694},{38,2.39,8827.39},{37,0.83,19651.05},{37,4.9,12139.55},
{36,1.67,12036.46},{35,1.84,2942.46},{33,0.24,7084.9},{32,0.18,5088.63},
{32,1.78,398.15},{28,1.21,6286.6},{28,1.9,6279.55},{26,4.59,10447.39}
};

double R1_tab[10][3] = { {103019,1.10749,6283.07585},{1721,1.0644,12566.1517},{702,3.142,0},{32,1.02,18849.23},
{31,2.84,5507.55},{25,1.32,5223.69},{18,1.42,1577.34},{10,5.91,10977.08},
{9,1.42,6275.96},{9,0.27,5486.78}
};

double R2_tab[6][3] = { {4359,5.7846,6283.0758},{124,5.579,12566.152},{12,3.14,0},{9,3.63,77713.77},
{6,1.87,5573.14},{3,5.47,18849.23}
};

double R3_tab[2][3] = { {145,4.273,6283.076},{7,3.92,12566.15} };
double R4_tab[3] = { 4, 2.56, 6283.08 };

double TA43[63][9] = {
{ 0.0,   0.0,   0.0,   0.0,   1.0,-171996.0,-174.2,92025.0,   8.9},
{-2.0,   0.0,   0.0,   2.0,   2.0,-13187.0,  -1.6,5736.0,  -3.1},
{ 0.0,   0.0,   0.0,   2.0,   2.0,-2274.0,  -0.2, 977.0,  -0.5},
{ 0.0,   0.0,   0.0,   0.0,   2.0,2062.0,   0.2,-895.0,   0.5},
{ 0.0,   1.0,   0.0,   0.0,   0.0,1426.0,  -3.4,  54.0,  -0.1},
{ 0.0,   0.0,   1.0,   0.0,   0.0, 712.0,   0.1,  -7.0,   0.0},
{-2.0,   1.0,   0.0,   2.0,   2.0,-517.0,   1.2, 224.0,  -0.6},
{ 0.0,   0.0,   0.0,   2.0,   1.0,-386.0,  -0.4, 200.0,   0.0},
{ 0.0,   0.0,   1.0,   2.0,   2.0,-301.0,   0.0, 129.0,  -0.1},
{-2.0,  -1.0,   0.0,   2.0,   2.0, 217.0,  -0.5, -95.0,   0.3},
{-2.0,   0.0,   1.0,   0.0,   0.0,-158.0,   0.0,   0.0,   0.0},
{-2.0,   0.0,   0.0,   2.0,   1.0, 129.0,   0.1, -70.0,   0.0},
{ 0.0,   0.0,  -1.0,   2.0,   2.0, 123.0,   0.0, -53.0,   0.0},
{ 2.0,   0.0,   0.0,   0.0,   0.0,  63.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,   1.0,   0.0,   1.0,  63.0,   0.1, -33.0,   0.0},
{ 2.0,   0.0,  -1.0,   2.0,   2.0, -59.0,   0.0,  26.0,   0.0},
{ 0.0,   0.0,  -1.0,   0.0,   1.0, -58.0,  -0.1,  32.0,   0.0},
{ 0.0,   0.0,   1.0,   2.0,   1.0, -51.0,   0.0,  27.0,   0.0},
{-2.0,   0.0,   2.0,   0.0,   0.0,  48.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,  -2.0,   2.0,   1.0,  46.0,   0.0, -24.0,   0.0},
{ 2.0,   0.0,   0.0,   2.0,   2.0, -38.0,   0.0,  16.0,   0.0},
{ 0.0,   0.0,   2.0,   2.0,   2.0, -31.0,   0.0,  13.0,   0.0},
{ 0.0,   0.0,   2.0,   0.0,   0.0,  29.0,   0.0,   0.0,   0.0},
{-2.0,   0.0,   1.0,   2.0,   2.0,  29.0,   0.0, -12.0,   0.0},
{ 0.0,   0.0,   0.0,   2.0,   0.0,  26.0,   0.0,   0.0,   0.0},
{-2.0,   0.0,   0.0,   2.0,   0.0, -22.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,  -1.0,   2.0,   1.0,  21.0,   0.0, -10.0,   0.0},
{ 0.0,   2.0,   0.0,   0.0,   0.0,  17.0,  -0.1,   0.0,   0.0},
{ 2.0,   0.0,  -1.0,   0.0,   1.0,  16.0,   0.0,  -8.0,   0.0},
{-2.0,   2.0,   0.0,   2.0,   2.0, -16.0,   0.1,   7.0,   0.0},
{ 0.0,   1.0,   0.0,   0.0,   1.0, -15.0,   0.0,   9.0,   0.0},
{-2.0,   0.0,   1.0,   0.0,   1.0, -13.0,   0.0,   7.0,   0.0},
{ 0.0,  -1.0,   0.0,   0.0,   1.0, -12.0,   0.0,   6.0,   0.0},
{ 0.0,   0.0,   2.0,  -2.0,   0.0,  11.0,   0.0,   0.0,   0.0},
{ 2.0,   0.0,  -1.0,   2.0,   1.0, -10.0,   0.0,   5.0,   0.0},
{ 2.0,   0.0,   1.0,   2.0,   2.0,  -8.0,   0.0,   3.0,   0.0},
{ 0.0,   1.0,   0.0,   2.0,   2.0,   7.0,   0.0,  -3.0,   0.0},
{-2.0,   1.0,   1.0,   0.0,   0.0,  -7.0,   0.0,   0.0,   0.0},
{ 0.0,  -1.0,   0.0,   2.0,   2.0,  -7.0,   0.0,   3.0,   0.0},
{ 2.0,   0.0,   0.0,   2.0,   1.0,  -7.0,   0.0,   3.0,   0.0},
{ 2.0,   0.0,   1.0,   0.0,   0.0,   6.0,   0.0,   0.0,   0.0},
{-2.0,   0.0,   2.0,   2.0,   2.0,   6.0,   0.0,  -3.0,   0.0},
{-2.0,   0.0,   1.0,   2.0,   1.0,   6.0,   0.0,  -3.0,   0.0},
{ 2.0,   0.0,  -2.0,   0.0,   1.0,  -6.0,   0.0,   3.0,   0.0},
{ 2.0,   0.0,   0.0,   0.0,   1.0,  -6.0,   0.0,   3.0,   0.0},
{ 0.0,  -1.0,   1.0,   0.0,   0.0,   5.0,   0.0,   0.0,   0.0},
{-2.0,  -1.0,   0.0,   2.0,   1.0,  -5.0,   0.0,   3.0,   0.0},
{-2.0,   0.0,   0.0,   0.0,   1.0,  -5.0,   0.0,   3.0,   0.0},
{ 0.0,   0.0,   2.0,   2.0,   1.0,  -5.0,   0.0,   3.0,   0.0},
{-2.0,   0.0,   2.0,   0.0,   1.0,   4.0,   0.0,   0.0,   0.0},
{-2.0,   1.0,   0.0,   2.0,   1.0,   4.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,   1.0,  -2.0,   0.0,   4.0,   0.0,   0.0,   0.0},
{-1.0,   0.0,   1.0,   0.0,   0.0,  -4.0,   0.0,   0.0,   0.0},
{-2.0,   1.0,   0.0,   0.0,   0.0,  -4.0,   0.0,   0.0,   0.0},
{ 1.0,   0.0,   0.0,   0.0,   0.0,  -4.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,   1.0,   2.0,   0.0,   3.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,  -2.0,   2.0,   2.0,  -3.0,   0.0,   0.0,   0.0},
{-1.0,  -1.0,   1.0,   0.0,   0.0,  -3.0,   0.0,   0.0,   0.0},
{ 0.0,   1.0,   1.0,   0.0,   0.0,  -3.0,   0.0,   0.0,   0.0},
{ 0.0,  -1.0,   1.0,   2.0,   2.0,  -3.0,   0.0,   0.0,   0.0},
{ 2.0,  -1.0,  -1.0,   2.0,   2.0,  -3.0,   0.0,   0.0,   0.0},
{ 0.0,   0.0,   3.0,   2.0,   2.0,  -3.0,   0.0,   0.0,   0.0},
{ 2.0,  -1.0,   0.0,   2.0,   2.0,  -3.0,   0.0,   0.0,   0.0}
};

double cal_jd(IECAS_AstInParams *ParaIn)
{
	double Y, M, D, A, Bz, JD;

	Y = (ParaIn->Month > 2) ? ParaIn->Year : (ParaIn->Year - 1);
	M = (ParaIn->Month > 2) ? ParaIn->Month : (ParaIn->Month + 12);
	D = ParaIn->Day + ParaIn->Hour / 24 + ParaIn->Minute / (24 * 60) + ParaIn->Second / (24 * 3600);
	A = floor(Y / 100);
	Bz = 2 - A + floor(A / 4);
	JD = floor(365.25*(Y + 4716)) + floor(30.6001*(M + 1)) + D + Bz - 1524.5;
	return JD;
}

void CDlgCtrl::OnBnClickedRadioAntData()
{
    IECAS_AstInParams para_input;
    IECAS_AstOutParams para_output;

    para_input.LON = 115.250617; // 根据GPS获取当地 经度 信息
    para_input.LAT = 42.212167;  // 根据GPS获取当地 纬度 信息

    para_input.Year = c.GetYear();
    para_input.Month = c.GetMonth();
    para_input.Day = c.GetDay();

    para_input.Hour = c.GetHour();
    para_input.Minute = c.GetMinute();
    para_input.Second = c.GetSecond();

    calc_alpha_betta1(&para_input, &para_output);

    sprintf(sData, "%.2f", para_output.A_angle); /* 赤经角 */
    sprintf(sData, "%.2f", para_output.D_angle); /* 赤纬角 */
}



int CDlgCtrl::calc_alpha_betta1(IECAS_AstInParams *ParaIn, IECAS_AstOutParams *ParaOut)
{
	
	//step 1: 计算JD, JDE, JC, JCE, JME
	double JD, JDE, JC, JCE, JME;
	JD = cal_jd(year, month, day, hour, minute, second);
	JDE = JD + dT / 86400;
	JC = (JD - 2451545) / 36525;
	JCE = (JDE - 2451545) / 36525;
	JME = JCE / 10;

	//step 2: 计算L, B, R
	double L0 = 0; double L1 = 0; double L2 = 0; double L3 = 0; double L4 = 0; double L5;

	for (int k = 0; k < 64; k = k + 1)
	{
		L0 = L0 + L0_tab[k][0] * cos(L0_tab[k][1] + L0_tab[k][2] * JME);
		if (k < 34) {
			L1 = L1 + L1_tab[k][0] * cos(L1_tab[k][1] + L1_tab[k][2] * JME);
		}
		if (k < 20) {
			L2 = L2 + L2_tab[k][0] * cos(L2_tab[k][1] + L2_tab[k][2] * JME);
		}
		if (k < 7) {
			L3 = L3 + L3_tab[k][0] * cos(L3_tab[k][1] + L3_tab[k][2] * JME);
		}
		if (k < 3) {
			L4 = L4 + L4_tab[k][0] * cos(L4_tab[k][1] + L4_tab[k][2] * JME);
		}
	}
	L5 = L5_tab[0] * cos(L5_tab[1] + L5_tab[2] * JME);
	double Lrad, Ldeg, LF, LI, L;
	Lrad = (L0 + L1 * JME + L2 * pow(JME, 2) + L3 * pow(JME, 3) + L4 * pow(JME, 4) + L5 * pow(JME, 5)) / 1e8;
	Ldeg = Lrad * 180 / PI;
	LF = modf(Ldeg / 360, &LI);
	L = (Ldeg >= 0) ? (360 * LF) : (360 + 360 * LF);

	double B0 = 0, B1 = 0, Brad, B;
	for (int k = 0; k < 5; k = k + 1) {
		B0 = B0 + B0_tab[k][0] * cos(B0_tab[k][1] + B0_tab[k][2] * JME);
		if (k < 2) {
			B1 = B1 + B1_tab[k][0] * cos(B1_tab[k][1] + B1_tab[k][2] * JME);
		}
	}
	Brad = (B0 + B1 * JME) / 1e8;
	B = Brad * 180 / PI;

	double R0 = 0, R1 = 0, R2 = 0, R3 = 0, R4 = 0, R;
	for (int k = 0; k < 40; k = k + 1) {
		R0 = R0 + R0_tab[k][0] * cos(R0_tab[k][1] + R0_tab[k][2] * JME);
		if (k < 10) {
			R1 = R1 + R1_tab[k][0] * cos(R1_tab[k][1] + R1_tab[k][2] * JME);
		}
		if (k < 6) {
			R2 = R2 + R2_tab[k][0] * cos(R2_tab[k][1] + R2_tab[k][2] * JME);
		}
		if (k < 2) {
			R3 = R3 + R3_tab[k][0] * cos(R3_tab[k][1] + R3_tab[k][2] * JME);
		}
	}
	R4 = R4 + R4_tab[0] * cos(R4_tab[1] + R4_tab[2] * JME);
	R = (R0 + R1 * JME + R2 * pow(JME, 2) + R3 * pow(JME, 3) + R4 * pow(JME, 4)) / 1e8;

	//Step 3: THETA & BETA(geocentric longitude and latitude)
	double THETA_g, TF, TI, THETA, BETA;
	THETA_g = L + 180;
	TF = modf(THETA_g / 360, &TI); // Limit THETA to the range from 0 to 360 degree.
	THETA = (THETA_g >= 0) ? (360 * TF) : (360 + 360 * TF); // in degrees
	BETA = -B; //# in degrees

	//Step 4: dPSI & dEPS (the nutation in longitude & obliquity)
	double X0, X1, X2, X3, X4, XV[5];
	//# X0:The mean elongation of the moon from the sun(in degrees)
	X0 = 297.85036 + 445267.111480*JCE - 0.0019142*pow(JCE, 2) + pow(JCE, 3) / 189474;
	//# X1 : the mean anomaly of the sun(in degrees)
	X1 = 357.52772 + 35999.050340*JCE - 0.0001603*pow(JCE, 2) - pow(JCE, 3) / 300000;
	//# X2 : the mean anomaly of the moon(in degrees)
	X2 = 134.96298 + 477198.867398*JCE + 0.0086972*pow(JCE, 2) + pow(JCE, 3) / 56250;
	//# X3 : the moon's argument of latitude (in degrees)
	X3 = 93.27191 + 483202.017538*JCE - 0.0036825*pow(JCE, 2) + pow(JCE, 3) / 327270;
	//# X4 : the longitude of the ascending node of the moon's mean orbit on the ecliptic,measured from the mean equinox of the date (in degrees)
	X4 = 125.04452 - 1934.136261*JCE + 0.0020708*pow(JCE, 2) + pow(JCE, 3) / 450000;

	XV[0] = X0 * PI / 180;
	XV[1] = X1 * PI / 180;
	XV[2] = X2 * PI / 180;
	XV[3] = X3 * PI / 180;
	XV[4] = X4 * PI / 180;


	double tmpA[63], tmpB[63], tmpC[63], tmpD[63], dPSI = 0, dEPS = 0;
	for (int k = 0; k < 63; ++k) {
		tmpA[k] = TA43[k][5] + TA43[k][6] * JCE;
		tmpB[k] = TA43[k][0] * XV[0] + TA43[k][1] * XV[1] + TA43[k][2] * XV[2] + TA43[k][3] * XV[3] + TA43[k][4] * XV[4];
		dPSI = dPSI + tmpA[k] * sin(tmpB[k]);
	}
	dPSI = dPSI / 36000000;
	for (int k = 0; k < 63; ++k) {
		tmpC[k] = TA43[k][7] + TA43[k][8] * JCE;
		tmpD[k] = TA43[k][0] * XV[0] + TA43[k][1] * XV[1] + TA43[k][2] * XV[2] + TA43[k][3] * XV[3] + TA43[k][4] * XV[4];
		dEPS = dEPS + tmpC[k] * cos(tmpD[k]);
	}
	dEPS = dEPS / 36000000;


	//Step 5: EPS (the true obliquity of the ecliptic, in degrees)
	//# EPS0(the mean obliquity of the ecliptic, in arc seconds)
	double U, EPS0, EPS;
	U = JME / 10;
	EPS0 = 84381.448 - 4680.93*U - 1.55*pow(U, 2) + 1999.25*pow(U, 3) - \
		51.38*pow(U, 4) - 249.67*pow(U, 5) - 39.05*pow(U, 6) + 7.12*pow(U, 7) + \
		27.87*pow(U, 8) + 5.79*pow(U, 9) + 2.45*pow(U, 10);
	EPS = EPS0 / 3600 + dEPS;

// Step 6:dTAU (the aberration correction, in degrees)
	double dTAU;
	dTAU = -20.4898 / (3600 * R);

	// Step 7: LAM (the apparent sun longitude, in degrees)
	double LAM;
	LAM = THETA + dPSI + dTAU;

// Step 8: VU (the apparent sidereal time at Greenwich at any given time: in degrees)
	double VU0_deg, VU0F, VU0I, VU0, VU;
	VU0_deg = 280.46061837 + 360.98564736629*(JD - 2451545) + \
		0.000387933*pow(JC, 2) - pow(JC, 3) / 38710000;
	VU0F = modf(VU0_deg / 360, &VU0I);
	VU0 = (VU0_deg >= 0) ? (360 * VU0F) : (360 + 360 * VU0F); // in degrees;
	VU = VU0 + dPSI * cos(EPS*PI / 180);

// Step 9: ALP (the geocentric sun right ascension, in degrees)
	double ALP_deg, ALPF, ALPI, ALP;
	ALP_deg = atan2((sin(LAM*PI / 180)*cos(EPS*PI / 180) -
		tan(BETA*PI / 180)*sin(EPS*PI / 180)), cos(LAM*PI / 180)) * 180 / PI;
	ALPF = modf(ALP_deg / 360, &ALPI);
	ALP = (ALP_deg >= 0) ? (360 * ALPF) : (360 + 360 * ALPF);

// Step 10: DELT (the geocentric sun declination, in degrees)
	double DELT, H_deg, HF, HI, H;
	DELT = asin(sin(BETA*PI / 180)*cos(EPS*PI / 180) +
		cos(BETA*PI / 180)*sin(EPS*PI / 180)*sin(LAM*PI / 180)) * 180 / PI;

	// Step 11: H (the ovserver local hour angle, in degrees)                     
	H_deg = VU + lon - ALP;
	HF = modf(H_deg / 360, &HI);
	H = (H_deg >= 0) ? (360 * HF) : (360 + 360 * HF);

	ParaOut->A_angle = H;
	ParaOut->D_angle = DELT;
    return (1);
}
